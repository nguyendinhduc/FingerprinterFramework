/*
 * This file is generated by jOOQ.
*/
package com.uet.fingerpinter.db.tables;


import com.uet.fingerpinter.db.Keys;
import com.uet.fingerpinter.db.Public;
import com.uet.fingerpinter.db.tables.records.RoomRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Room extends TableImpl<RoomRecord> {

    private static final long serialVersionUID = -1919365184;

    /**
     * The reference instance of <code>public.room</code>
     */
    public static final Room ROOM = new Room();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoomRecord> getRecordType() {
        return RoomRecord.class;
    }

    /**
     * The column <code>public.room.id</code>.
     */
    public final TableField<RoomRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('room_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.room.room_name</code>.
     */
    public final TableField<RoomRecord, String> ROOM_NAME = createField("room_name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.room.building_id</code>.
     */
    public final TableField<RoomRecord, Integer> BUILDING_ID = createField("building_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.room</code> table reference
     */
    public Room() {
        this("room", null);
    }

    /**
     * Create an aliased <code>public.room</code> table reference
     */
    public Room(String alias) {
        this(alias, ROOM);
    }

    private Room(String alias, Table<RoomRecord> aliased) {
        this(alias, aliased, null);
    }

    private Room(String alias, Table<RoomRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RoomRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RoomRecord> getPrimaryKey() {
        return Keys.ROOM_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RoomRecord>> getKeys() {
        return Arrays.<UniqueKey<RoomRecord>>asList(Keys.ROOM_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RoomRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RoomRecord, ?>>asList(Keys.ROOM__FORKEY_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Room as(String alias) {
        return new Room(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Room rename(String name) {
        return new Room(name, null);
    }
}
