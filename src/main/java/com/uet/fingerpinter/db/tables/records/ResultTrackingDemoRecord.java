/*
 * This file is generated by jOOQ.
*/
package com.uet.fingerpinter.db.tables.records;


import com.uet.fingerpinter.db.tables.ResultTrackingDemo;
import com.uet.fingerpinter.jooq.type.TypeFingerprinterInfo;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResultTrackingDemoRecord extends UpdatableRecordImpl<ResultTrackingDemoRecord> implements Record7<Integer, TypeFingerprinterInfo, Integer, Double, Double, Integer, Double> {

    private static final long serialVersionUID = 647095453;

    /**
     * Setter for <code>location_indoor.result_tracking_demo.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>location_indoor.result_tracking_demo.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>location_indoor.result_tracking_demo.type_algorithm</code>.
     */
    public void setTypeAlgorithm(TypeFingerprinterInfo value) {
        set(1, value);
    }

    /**
     * Getter for <code>location_indoor.result_tracking_demo.type_algorithm</code>.
     */
    public TypeFingerprinterInfo getTypeAlgorithm() {
        return (TypeFingerprinterInfo) get(1);
    }

    /**
     * Setter for <code>location_indoor.result_tracking_demo.index</code>.
     */
    public void setIndex(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>location_indoor.result_tracking_demo.index</code>.
     */
    public Integer getIndex() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>location_indoor.result_tracking_demo.x</code>.
     */
    public void setX(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>location_indoor.result_tracking_demo.x</code>.
     */
    public Double getX() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>location_indoor.result_tracking_demo.y</code>.
     */
    public void setY(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>location_indoor.result_tracking_demo.y</code>.
     */
    public Double getY() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>location_indoor.result_tracking_demo.session_id</code>.
     */
    public void setSessionId(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>location_indoor.result_tracking_demo.session_id</code>.
     */
    public Integer getSessionId() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>location_indoor.result_tracking_demo.delta</code>.
     */
    public void setDelta(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>location_indoor.result_tracking_demo.delta</code>.
     */
    public Double getDelta() {
        return (Double) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Integer, TypeFingerprinterInfo, Integer, Double, Double, Integer, Double> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Integer, TypeFingerprinterInfo, Integer, Double, Double, Integer, Double> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return ResultTrackingDemo.RESULT_TRACKING_DEMO.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<TypeFingerprinterInfo> field2() {
        return ResultTrackingDemo.RESULT_TRACKING_DEMO.TYPE_ALGORITHM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return ResultTrackingDemo.RESULT_TRACKING_DEMO.INDEX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field4() {
        return ResultTrackingDemo.RESULT_TRACKING_DEMO.X;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field5() {
        return ResultTrackingDemo.RESULT_TRACKING_DEMO.Y;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return ResultTrackingDemo.RESULT_TRACKING_DEMO.SESSION_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field7() {
        return ResultTrackingDemo.RESULT_TRACKING_DEMO.DELTA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeFingerprinterInfo value2() {
        return getTypeAlgorithm();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getIndex();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value4() {
        return getX();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value5() {
        return getY();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getSessionId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value7() {
        return getDelta();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultTrackingDemoRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultTrackingDemoRecord value2(TypeFingerprinterInfo value) {
        setTypeAlgorithm(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultTrackingDemoRecord value3(Integer value) {
        setIndex(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultTrackingDemoRecord value4(Double value) {
        setX(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultTrackingDemoRecord value5(Double value) {
        setY(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultTrackingDemoRecord value6(Integer value) {
        setSessionId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultTrackingDemoRecord value7(Double value) {
        setDelta(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultTrackingDemoRecord values(Integer value1, TypeFingerprinterInfo value2, Integer value3, Double value4, Double value5, Integer value6, Double value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ResultTrackingDemoRecord
     */
    public ResultTrackingDemoRecord() {
        super(ResultTrackingDemo.RESULT_TRACKING_DEMO);
    }

    /**
     * Create a detached, initialised ResultTrackingDemoRecord
     */
    public ResultTrackingDemoRecord(Integer id, TypeFingerprinterInfo typeAlgorithm, Integer index, Double x, Double y, Integer sessionId, Double delta) {
        super(ResultTrackingDemo.RESULT_TRACKING_DEMO);

        set(0, id);
        set(1, typeAlgorithm);
        set(2, index);
        set(3, x);
        set(4, y);
        set(5, sessionId);
        set(6, delta);
    }
}
