/*
 * This file is generated by jOOQ.
*/
package com.uet.fingerpinter.db;


import com.uet.fingerpinter.db.tables.Building;
import com.uet.fingerpinter.db.tables.FingerprinterInfo;
import com.uet.fingerpinter.db.tables.FingerprinterInfoDetail;
import com.uet.fingerpinter.db.tables.FingerprinterInfoGauss;
import com.uet.fingerpinter.db.tables.FingerprinterTracking;
import com.uet.fingerpinter.db.tables.Room;
import com.uet.fingerpinter.db.tables.TrackReal;
import com.uet.fingerpinter.db.tables.Tracking;
import com.uet.fingerpinter.db.tables.TrackingKNearest;
import com.uet.fingerpinter.db.tables.User;
import com.uet.fingerpinter.db.tables.records.BuildingRecord;
import com.uet.fingerpinter.db.tables.records.FingerprinterInfoDetailRecord;
import com.uet.fingerpinter.db.tables.records.FingerprinterInfoGaussRecord;
import com.uet.fingerpinter.db.tables.records.FingerprinterInfoRecord;
import com.uet.fingerpinter.db.tables.records.FingerprinterTrackingRecord;
import com.uet.fingerpinter.db.tables.records.RoomRecord;
import com.uet.fingerpinter.db.tables.records.TrackRealRecord;
import com.uet.fingerpinter.db.tables.records.TrackingKNearestRecord;
import com.uet.fingerpinter.db.tables.records.TrackingRecord;
import com.uet.fingerpinter.db.tables.records.UserRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>public</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<BuildingRecord, Integer> IDENTITY_BUILDING = Identities0.IDENTITY_BUILDING;
    public static final Identity<FingerprinterInfoRecord, Integer> IDENTITY_FINGERPRINTER_INFO = Identities0.IDENTITY_FINGERPRINTER_INFO;
    public static final Identity<FingerprinterInfoDetailRecord, Integer> IDENTITY_FINGERPRINTER_INFO_DETAIL = Identities0.IDENTITY_FINGERPRINTER_INFO_DETAIL;
    public static final Identity<FingerprinterInfoGaussRecord, Integer> IDENTITY_FINGERPRINTER_INFO_GAUSS = Identities0.IDENTITY_FINGERPRINTER_INFO_GAUSS;
    public static final Identity<FingerprinterTrackingRecord, Integer> IDENTITY_FINGERPRINTER_TRACKING = Identities0.IDENTITY_FINGERPRINTER_TRACKING;
    public static final Identity<RoomRecord, Integer> IDENTITY_ROOM = Identities0.IDENTITY_ROOM;
    public static final Identity<TrackRealRecord, Integer> IDENTITY_TRACK_REAL = Identities0.IDENTITY_TRACK_REAL;
    public static final Identity<TrackingRecord, Integer> IDENTITY_TRACKING = Identities0.IDENTITY_TRACKING;
    public static final Identity<TrackingKNearestRecord, Integer> IDENTITY_TRACKING_K_NEAREST = Identities0.IDENTITY_TRACKING_K_NEAREST;
    public static final Identity<UserRecord, Integer> IDENTITY_USER = Identities0.IDENTITY_USER;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BuildingRecord> BUILDING_PKEY = UniqueKeys0.BUILDING_PKEY;
    public static final UniqueKey<FingerprinterInfoRecord> FINGERPRINTER_INFO_PKEY = UniqueKeys0.FINGERPRINTER_INFO_PKEY;
    public static final UniqueKey<FingerprinterInfoDetailRecord> FINGERPRINTER_INFO_DETAIL_PKEY = UniqueKeys0.FINGERPRINTER_INFO_DETAIL_PKEY;
    public static final UniqueKey<FingerprinterInfoGaussRecord> FINGERPRINTER_INFO_GAUSS_PKEY = UniqueKeys0.FINGERPRINTER_INFO_GAUSS_PKEY;
    public static final UniqueKey<FingerprinterTrackingRecord> FINGERPRINTER_TRACKING_PKEY = UniqueKeys0.FINGERPRINTER_TRACKING_PKEY;
    public static final UniqueKey<RoomRecord> ROOM_PKEY = UniqueKeys0.ROOM_PKEY;
    public static final UniqueKey<TrackRealRecord> TRACK_REAL_PKEY = UniqueKeys0.TRACK_REAL_PKEY;
    public static final UniqueKey<TrackingRecord> TRACKING_PKEY = UniqueKeys0.TRACKING_PKEY;
    public static final UniqueKey<TrackingKNearestRecord> TRACKING_K_NEAREST_PKEY = UniqueKeys0.TRACKING_K_NEAREST_PKEY;
    public static final UniqueKey<UserRecord> USER_PKEY = UniqueKeys0.USER_PKEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FingerprinterInfoRecord, RoomRecord> FINGERPRINTER_INFO__FORKEY_1 = ForeignKeys0.FINGERPRINTER_INFO__FORKEY_1;
    public static final ForeignKey<FingerprinterInfoRecord, BuildingRecord> FINGERPRINTER_INFO__FORKEY_2 = ForeignKeys0.FINGERPRINTER_INFO__FORKEY_2;
    public static final ForeignKey<FingerprinterInfoGaussRecord, RoomRecord> FINGERPRINTER_INFO_GAUSS__FINGERPRINTER_INFO_GAUSS_1 = ForeignKeys0.FINGERPRINTER_INFO_GAUSS__FINGERPRINTER_INFO_GAUSS_1;
    public static final ForeignKey<RoomRecord, BuildingRecord> ROOM__FORKEY_1 = ForeignKeys0.ROOM__FORKEY_1;
    public static final ForeignKey<TrackRealRecord, RoomRecord> TRACK_REAL__TRACK_REAL_1 = ForeignKeys0.TRACK_REAL__TRACK_REAL_1;
    public static final ForeignKey<TrackingRecord, RoomRecord> TRACKING__TRACKING_KEY_1 = ForeignKeys0.TRACKING__TRACKING_KEY_1;
    public static final ForeignKey<TrackingKNearestRecord, TrackingRecord> TRACKING_K_NEAREST__TRACKING_K_NEAREST_KEY = ForeignKeys0.TRACKING_K_NEAREST__TRACKING_K_NEAREST_KEY;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<BuildingRecord, Integer> IDENTITY_BUILDING = createIdentity(Building.BUILDING, Building.BUILDING.ID);
        public static Identity<FingerprinterInfoRecord, Integer> IDENTITY_FINGERPRINTER_INFO = createIdentity(FingerprinterInfo.FINGERPRINTER_INFO, FingerprinterInfo.FINGERPRINTER_INFO.ID);
        public static Identity<FingerprinterInfoDetailRecord, Integer> IDENTITY_FINGERPRINTER_INFO_DETAIL = createIdentity(FingerprinterInfoDetail.FINGERPRINTER_INFO_DETAIL, FingerprinterInfoDetail.FINGERPRINTER_INFO_DETAIL.ID);
        public static Identity<FingerprinterInfoGaussRecord, Integer> IDENTITY_FINGERPRINTER_INFO_GAUSS = createIdentity(FingerprinterInfoGauss.FINGERPRINTER_INFO_GAUSS, FingerprinterInfoGauss.FINGERPRINTER_INFO_GAUSS.ID);
        public static Identity<FingerprinterTrackingRecord, Integer> IDENTITY_FINGERPRINTER_TRACKING = createIdentity(FingerprinterTracking.FINGERPRINTER_TRACKING, FingerprinterTracking.FINGERPRINTER_TRACKING.ID);
        public static Identity<RoomRecord, Integer> IDENTITY_ROOM = createIdentity(Room.ROOM, Room.ROOM.ID);
        public static Identity<TrackRealRecord, Integer> IDENTITY_TRACK_REAL = createIdentity(TrackReal.TRACK_REAL, TrackReal.TRACK_REAL.ID);
        public static Identity<TrackingRecord, Integer> IDENTITY_TRACKING = createIdentity(Tracking.TRACKING, Tracking.TRACKING.ID);
        public static Identity<TrackingKNearestRecord, Integer> IDENTITY_TRACKING_K_NEAREST = createIdentity(TrackingKNearest.TRACKING_K_NEAREST, TrackingKNearest.TRACKING_K_NEAREST.ID);
        public static Identity<UserRecord, Integer> IDENTITY_USER = createIdentity(User.USER, User.USER.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<BuildingRecord> BUILDING_PKEY = createUniqueKey(Building.BUILDING, "building_pkey", Building.BUILDING.ID);
        public static final UniqueKey<FingerprinterInfoRecord> FINGERPRINTER_INFO_PKEY = createUniqueKey(FingerprinterInfo.FINGERPRINTER_INFO, "fingerprinter_info_pkey", FingerprinterInfo.FINGERPRINTER_INFO.ID);
        public static final UniqueKey<FingerprinterInfoDetailRecord> FINGERPRINTER_INFO_DETAIL_PKEY = createUniqueKey(FingerprinterInfoDetail.FINGERPRINTER_INFO_DETAIL, "fingerprinter_info_detail_pkey", FingerprinterInfoDetail.FINGERPRINTER_INFO_DETAIL.ID);
        public static final UniqueKey<FingerprinterInfoGaussRecord> FINGERPRINTER_INFO_GAUSS_PKEY = createUniqueKey(FingerprinterInfoGauss.FINGERPRINTER_INFO_GAUSS, "fingerprinter_info_gauss_pkey", FingerprinterInfoGauss.FINGERPRINTER_INFO_GAUSS.ID);
        public static final UniqueKey<FingerprinterTrackingRecord> FINGERPRINTER_TRACKING_PKEY = createUniqueKey(FingerprinterTracking.FINGERPRINTER_TRACKING, "fingerprinter_tracking_pkey", FingerprinterTracking.FINGERPRINTER_TRACKING.ID);
        public static final UniqueKey<RoomRecord> ROOM_PKEY = createUniqueKey(Room.ROOM, "room_pkey", Room.ROOM.ID);
        public static final UniqueKey<TrackRealRecord> TRACK_REAL_PKEY = createUniqueKey(TrackReal.TRACK_REAL, "track_real_pkey", TrackReal.TRACK_REAL.ID);
        public static final UniqueKey<TrackingRecord> TRACKING_PKEY = createUniqueKey(Tracking.TRACKING, "tracking_pkey", Tracking.TRACKING.ID);
        public static final UniqueKey<TrackingKNearestRecord> TRACKING_K_NEAREST_PKEY = createUniqueKey(TrackingKNearest.TRACKING_K_NEAREST, "tracking_k_nearest_pkey", TrackingKNearest.TRACKING_K_NEAREST.ID);
        public static final UniqueKey<UserRecord> USER_PKEY = createUniqueKey(User.USER, "user_pkey", User.USER.ID);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<FingerprinterInfoRecord, RoomRecord> FINGERPRINTER_INFO__FORKEY_1 = createForeignKey(com.uet.fingerpinter.db.Keys.ROOM_PKEY, FingerprinterInfo.FINGERPRINTER_INFO, "fingerprinter_info__forkey_1", FingerprinterInfo.FINGERPRINTER_INFO.ROOM_ID);
        public static final ForeignKey<FingerprinterInfoRecord, BuildingRecord> FINGERPRINTER_INFO__FORKEY_2 = createForeignKey(com.uet.fingerpinter.db.Keys.BUILDING_PKEY, FingerprinterInfo.FINGERPRINTER_INFO, "fingerprinter_info__forkey_2", FingerprinterInfo.FINGERPRINTER_INFO.BUILDING_ID);
        public static final ForeignKey<FingerprinterInfoGaussRecord, RoomRecord> FINGERPRINTER_INFO_GAUSS__FINGERPRINTER_INFO_GAUSS_1 = createForeignKey(com.uet.fingerpinter.db.Keys.ROOM_PKEY, FingerprinterInfoGauss.FINGERPRINTER_INFO_GAUSS, "fingerprinter_info_gauss__fingerprinter_info_gauss_1", FingerprinterInfoGauss.FINGERPRINTER_INFO_GAUSS.ROOM_ID);
        public static final ForeignKey<RoomRecord, BuildingRecord> ROOM__FORKEY_1 = createForeignKey(com.uet.fingerpinter.db.Keys.BUILDING_PKEY, Room.ROOM, "room__forkey_1", Room.ROOM.BUILDING_ID);
        public static final ForeignKey<TrackRealRecord, RoomRecord> TRACK_REAL__TRACK_REAL_1 = createForeignKey(com.uet.fingerpinter.db.Keys.ROOM_PKEY, TrackReal.TRACK_REAL, "track_real__track_real_1", TrackReal.TRACK_REAL.ROOM_ID);
        public static final ForeignKey<TrackingRecord, RoomRecord> TRACKING__TRACKING_KEY_1 = createForeignKey(com.uet.fingerpinter.db.Keys.ROOM_PKEY, Tracking.TRACKING, "tracking__tracking_key_1", Tracking.TRACKING.ROOM_ID);
        public static final ForeignKey<TrackingKNearestRecord, TrackingRecord> TRACKING_K_NEAREST__TRACKING_K_NEAREST_KEY = createForeignKey(com.uet.fingerpinter.db.Keys.TRACKING_PKEY, TrackingKNearest.TRACKING_K_NEAREST, "tracking_k_nearest__tracking_k_nearest_key", TrackingKNearest.TRACKING_K_NEAREST.TRACKING_ID);
    }
}
